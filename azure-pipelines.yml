# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseDotNet@2
  inputs:
    packageType: 'sdk'
    version: '5.0.x'
- task: DotNetCoreCLI@2
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'restore'    
- script: |
    export Black='\033[0;30m'
    export DarkGray='\033[1;30m'
    export Red='\033[0;31m'
    export LightRed='\033[1;31m'
    export Green='\033[0;32m'
    export LightGreen='\033[1;32m'
    export Orange='\033[0;33m'
    export Yellow='\033[1;33m'
    export Blue='\033[0;34m'
    export LightBlue='\033[1;34m'
    export Purple='\033[0;35m'
    export LightPurple='\033[1;35m'
    export Cyan='\033[0;36m'
    export LightCyan='\033[1;36m'
    export LightGray='\033[0;37m'
    export White='\033[1;37m'
    export NoColor='\033[0m\n'
    function log(){
        printf "${LightCyan}$1${NoColor}"
    }
    
  displayName: Display colors
- script: |
    dotnet tool restore
    dotnet paket update
  displayName: 'Install prereq'

- 

- script: |
    if [[ -z "$BUILD_VERSION" ]]
    then
      echo "A packet version is required. '$BUILD_VERSION' is not a version"
      exit 3
    fi

    if [[ ! -z $(FEED_PAT) ]]
    then
        FEED_USER=$(FEED_PAT)
        FEED_PASSWORD=$(FEED_PAT)
    fi

    if [[ ! -z $FEED_USER ]]
    then
        VSS_NUGET_EXTERNAL_FEED_ENDPOINTS="{\"endpointCredentials\": [{\"endpoint\":\"${FEED_URL}\", \"username\":\"${FEED_USER}\", \"password\":\"${FEED_PASSWORD}\"}]}"
        curl -L https://raw.githubusercontent.com/Microsoft/artifacts-credprovider/master/helpers/installcredprovider.sh  | sh
        echo "<?xml version=\"1.0\" encoding=\"utf-8\"?><configuration><packageSources><clear /><add key=\"KMD_Package_Feed\" value=\"${FEED_URL}\" /></packageSources></configuration>" >> nuget.config
    fi

    cd src

    if [ -z "$API_KEY" ]
    then
        API_KEY="az"
    fi

    if [ -z "$FEED_URL" ]
    then
        printf "$Green pushing $BUILD_VERSION to default endpoint $NoColor"
        dotnet nuget push --api-key $API_KEY "$(ls *.nupkg)"
    else
        printf "$Green pushing $BUILD_VERSION to $FEED_URL $NoColor"
        dotnet nuget push --api-key $API_KEY --source "$FEED_URL" "$(ls *.nupkg)"
    fi
    
  env:
    BUILD_VERSION: $(Rev:r)
    API_KEY: $(API_KEY)
  displayName: 'release'
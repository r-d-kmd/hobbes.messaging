# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: |
    dotnet tool restore
  displayName: 'Install prereq'

- script: |
    dotnet fake build --target package
    VERSION="1.1.$BUILD_VERSION"
    if [[ -z "$VERSION" ]]
    then
      printf "\033[0;31mA packet version is required\033[0m\n"
      exit 1
    fi

    if [[ ! -z $FEED_PAT ]]
    then
        FEED_USER=$FEED_PAT
        FEED_PASSWORD=$FEED_PAT
    fi

    if [[ ! -z $FEED_USER ]]
    then
        VSS_NUGET_EXTERNAL_FEED_ENDPOINTS="{\"endpointCredentials\": [{\"endpoint\":\"${FEED_URL}\", \"username\":\"${FEED_USER}\", \"password\":\"${FEED_PASSWORD}\"}]}"
        curl -L https://raw.githubusercontent.com/Microsoft/artifacts-credprovider/master/helpers/installcredprovider.sh  | sh
        echo "<?xml version=\"1.0\" encoding=\"utf-8\"?><configuration><packageSources><clear /><add key=\"KMD_Package_Feed\" value=\"${FEED_URL}\" /></packageSources></configuration>" >> nuget.config
    fi

    dotnet build --configuration Release
    dotnet paket pack --version "$VERSION" . 

    if [ -z $API_KEY ]
    then
        API_KEY="az"
    fi
    PKG_FILE="$(ls *.nupkg)"
    if [ -z $FEED_URL ]
    then
        dotnet nuget push --api-key $API_KEY "$PKG_FILE"
    else
        dotnet nuget push --api-key $API_KEY --source "$FEED_URL" "$PKG_FILE"
    fi
  env:
    BUILD_VERSION : $(Build.BuildNumber)
    FEED_PAT: $(FEED_PAT)
    FEED_URL: $(FEED_URL)
  displayName: 'release'